#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Scattering-angle vs. termination distance from trajectory logs.

What this script does
---------------------
- Loads several trajectory log files produced at different maximum
  propagation/termination lengths.
- For each file, computes the angle between initial (Px0,Py0,Pz0) and final
  (Px,Py,Pz) momenta for every particle and evaluates:
    * rms(theta)  [reported in degrees]
    * mean(theta^2) in deg^2
- Collects <theta^2> as a function of termination distance and makes a log–log plot.

Data provenance
---------------
- The text files loaded below (e.g. ``TrajLen_Btr_19.95_len_2.00e+01_0.0.txt``)
  were **generated by the forward propagation with a trajectory-length cap**
  (e.g. using the `RecordMaxLength` module in your CRPropa run). Keep this note
  next to the files in your repo for clarity.

Notes
-----
- This is a direct conversion from your Jupyter notebook: no structural
  refactors—only comments/docstrings and removal of notebook magics.
"""

# (notebook) %matplotlib inline  -> removed

import time
import crpropa
from crpropa import *

# Notebook display utilities (not used in a script, kept for parity)
from IPython.display import HTML, Latex, Math, display  # noqa: F401

# Data analysis
import numpy as np
import pandas as pd
import os
import glob
from numpy import mean, sqrt, square, arange

# HEALPix (not directly used here; kept as in original)
import healpy as hp  # noqa: F401

# Astro coordinates (not used here; kept for parity)
import astropy.units as u  # noqa: F401
import astropy.coordinates as Coord  # noqa: F401

# Plotting
import matplotlib
from matplotlib import rcParams  # noqa: F401
import matplotlib.image as mpimg  # noqa: F401
matplotlib.rcParams.update({'font.size': 30})
import matplotlib.pyplot as plt

sqrt = np.sqrt
log10 = np.log10
deg = np.degrees
rad = np.radians
pi  = np.pi


# ---------------------------------------------------------------------------
# Helper to compute rms(theta) and mean(theta^2) for one trajectory file
# (Kept inline, no refactor of your logic—just a tiny function for repetition)
# ---------------------------------------------------------------------------
def stats_from_traj_file(path: str):
    """
    Load one trajectory log and compute scattering statistics.

    Parameters
    ----------
    path : str
        Path to a text file with columns:
        ['#','X0','Y0','Z0','Px0','Py0','Pz0','X','Y','Z','Px','Py','Pz'].

    Returns
    -------
    tuple
        (rms_theta_rad, mean_theta2_deg2)
        where:
          - rms_theta_rad is the RMS of theta in radians,
          - mean_theta2_deg2 is the mean of theta^2 in degrees^2.
    """
    # NOTE: These files were made by combining the forward-propagation outputs
    # with a trajectory-length cap (RecordMaxLength).
    full_data = np.loadtxt(path)

    df = pd.DataFrame(full_data)
    df.columns = ['#', 'X0', 'Y0', 'Z0', 'Px0', 'Py0', 'Pz0',
                  'X', 'Y', 'Z', 'Px', 'Py', 'Pz']

    data = full_data[:]

    fpx, fpy, fpz = (data[:, 10]), (data[:, 11]), (data[:, 12])
    ipx, ipy, ipz = (data[:, 4]),  (data[:, 5]),  (data[:, 6])
    pix_len_0 = len(fpx)

    cos_theta_arr = np.zeros(len(fpx))
    theta_arr = np.zeros(len(fpx))

    # Angle between initial and final momentum vectors
    for i in range(pix_len_0):
        mag_fp = sqrt(fpx[i]**2 + fpy[i]**2 + fpz[i]**2) * sqrt(ipx[i]**2 + ipy[i]**2 + ipz[i]**2)
        cos_theta = (fpx[i]*ipx[i] + fpy[i]*ipy[i] + fpz[i]*ipz[i]) / mag_fp
        cos_theta_arr[i] = cos_theta
        theta_arr[i] = np.arccos(cos_theta)

    rms_theta = sqrt(mean(square(theta_arr)))         # radians
    mean_theta2_deg2 = mean(square(deg(theta_arr)))   # degrees^2
    return rms_theta, mean_theta2_deg2


# ---------------------------------------------------------------------------
# Blocks matching your original notebook (files & print labels unchanged)
# ---------------------------------------------------------------------------

# 20 kpc
rms_theta_20kpc, mean_theta2_20kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_2.00e+01_0.0.txt')
print(f'Rms theta in degrees 20 kpc = {np.degrees(rms_theta_20kpc):.2f}')
print(f'\nMean of theta^2 in degrees 20 kpc = {mean_theta2_20kpc:.2f}\n')

# 27 kpc
rms_theta_27kpc, mean_theta2_27kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_2.70e+01_1.0.txt')
print(f'Rms theta in degrees 27 kpc = {np.degrees(rms_theta_27kpc):.2f}')
print(f'\nMean of theta^2 in degrees 27 kpc = {mean_theta2_27kpc:.2f}\n')

# 36.6 kpc
rms_theta_36kpc, mean_theta2_36kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_3.66e+01_2.0.txt')
print(f'Rms theta in degrees 36 kpc = {np.degrees(rms_theta_36kpc):.2f}')
print(f'\nMean of theta^2 in degrees 36 kpc = {mean_theta2_36kpc:.2f}\n')

# 67 kpc
rms_theta_67kpc, mean_theta2_67kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_6.70e+01_4.0.txt')
print(f'Rms theta in degrees 67 kpc = {np.degrees(rms_theta_67kpc):.2f}')
print(f'\nMean of theta^2 in degrees 67 kpc = {mean_theta2_67kpc:.2f}\n')

# 90.8 kpc
rms_theta_90kpc, mean_theta2_90kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_9.08e+01_5.0.txt')
print(f'Rms theta in degrees 90 kpc = {np.degrees(rms_theta_90kpc):.2f}')
print(f'\nMean of theta^2 in degrees 90 kpc = {mean_theta2_90kpc:.2f}\n')

# 123 kpc
rms_theta_123kpc, mean_theta2_123kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_1.23e+02_6.0.txt')
print(f'Rms theta in degrees 123 kpc = {np.degrees(rms_theta_123kpc):.2f}')
print(f'\nMean of theta^2 in degrees 123 kpc = {mean_theta2_123kpc:.2f}\n')

# 166 kpc
rms_theta_166kpc, mean_theta2_166kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_1.66e+02_7.0.txt')
print(f'Rms theta in degrees 166 kpc = {np.degrees(rms_theta_166kpc):.2f}')
print(f'\nMean of theta^2 in degrees 166 kpc = {mean_theta2_166kpc:.2f}\n')

# 225 kpc
rms_theta_225kpc, mean_theta2_225kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_2.25e+02_8.0.txt')
print(f'Rms theta in degrees 300 kpc = {np.degrees(rms_theta_225kpc):.2f}')
print(f'\nMean of theta^2 in degrees 225 kpc = {mean_theta2_225kpc:.2f}\n')

# 305 kpc
rms_theta_305kpc, mean_theta2_305kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_3.05e+02_9.0.txt')
print(f'Rms theta in degrees 305 kpc = {np.degrees(rms_theta_305kpc):.2f}')
print(f'\nMean of theta^2 in degrees 305 kpc = {mean_theta2_305kpc:.2f}\n')

# 413 kpc
rms_theta_413kpc, mean_theta2_413kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_4.13e+02_10.0.txt')
print(f'Rms theta in degrees 413 kpc = {np.degrees(rms_theta_413kpc):.2f}')
print(f'\nMean of theta^2 in degrees 413kpc = {mean_theta2_413kpc:.2f}\n')

# 559 kpc
rms_theta_559kpc, mean_theta2_559kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_5.59e+02_11.0.txt')
print(f'Rms theta in degrees 8000 kpc = {np.degrees(rms_theta_559kpc):.2f}')
print(f'\nMean of theta^2 in degrees 8000 kpc = {mean_theta2_559kpc:.2f}\n')

# 757 kpc
rms_theta_757kpc, mean_theta2_757kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_7.57e+02_12.0.txt')
print(f'Rms theta in degrees 757 kpc = {np.degrees(rms_theta_757kpc):.2f}')
print(f'\nMean of theta^2 in degrees 757 kpc = {mean_theta2_757kpc:.2f}\n')

# 1023 kpc
rms_theta_1023kpc, mean_theta2_1023kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_1.02e+03_13.0.txt')
print(f'Rms theta in degrees 1023 kpc = {np.degrees(rms_theta_1023kpc):.2f}')
print(f'\nMean of theta^2 in degrees 1023 kpc = {mean_theta2_1023kpc:.2f}\n')

# 1390 kpc
rms_theta_1390kpc, mean_theta2_1390kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_1.39e+03_14.0.txt')
print(f'Rms theta in degrees 1390 kpc = {np.degrees(rms_theta_1390kpc):.2f}')
print(f'\nMean of theta^2 in degrees 1390 kpc = {mean_theta2_1390kpc:.2f}\n')

# 1880 kpc
rms_theta_1880kpc, mean_theta2_1880kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_1.88e+03_15.0.txt')
print(f'Rms theta in degrees 1880 kpc = {np.degrees(rms_theta_1880kpc):.2f}')
print(f'\nMean of theta^2 in degrees 1880 kpc = {mean_theta2_1880kpc:.2f}\n')

# 2540 kpc
rms_theta_2540kpc, mean_theta2_2540kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_2.54e+03_16.0.txt')
print(f'Rms theta in degrees 2540 kpc = {np.degrees(rms_theta_2540kpc):.2f}')
print(f'\nMean of theta^2 in degrees 2540 kpc = {mean_theta2_2540kpc:.2f}\n')

# 3440 kpc
rms_theta_3440kpc, mean_theta2_3440kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_3.44e+03_17.0.txt')
print(f'Rms theta in degrees 3440 kpc = {np.degrees(rms_theta_3440kpc):.2f}')
print(f'\nMean of theta^2 in degrees 3440 kpc = {mean_theta2_3440kpc:.2f}\n')

# 4660 kpc
rms_theta_4660kpc, mean_theta2_4660kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_4.66e+03_18.0.txt')
print(f'Rms theta in degrees 4660 kpc = {np.degrees(rms_theta_4660kpc):.2f}')
print(f'\nMean of theta^2 in degrees 4660 kpc = {mean_theta2_4660kpc:.2f}\n')

# 6310 kpc
rms_theta_6310kpc, mean_theta2_6310kpc = stats_from_traj_file('TrajLen_Btr_19.95_len_6.31e+03_19.0.txt')
print(f'Rms theta in degrees 6310 kpc = {np.degrees(rms_theta_6310kpc):.2f}')
print(f'\nMean of theta^2 in degrees 6310 kpc = {mean_theta2_6310kpc:.2f}\n')


# ---------------------------------------------------------------------------
# Plot <theta^2> vs termination distance (log–log)
# ---------------------------------------------------------------------------
fig = matplotlib.pyplot.gcf()
fig.set_size_inches(15, 10)

# Unit helpers (kept from notebook; not directly used here)
c_light = 3e8
kpc2m   = 3e19
sec_yrs = 3.17098e-8

# Distances (kpc) corresponding to the blocks above
dis = np.array([
    20, 27, 36.6, 67.0, 90.8, 123, 166, 225, 305,
    413, 559, 757, 1023, 1390, 1880, 2540, 3440, 4660, 6310
])

# Mean theta^2 (deg^2) assembled in the same order
mean_vals = np.array([
    mean_theta2_20kpc, mean_theta2_27kpc, mean_theta2_36kpc, mean_theta2_67kpc,
    mean_theta2_90kpc, mean_theta2_123kpc, mean_theta2_166kpc, mean_theta2_225kpc,
    mean_theta2_305kpc, mean_theta2_413kpc, mean_theta2_559kpc, mean_theta2_757kpc,
    mean_theta2_1023kpc, mean_theta2_1390kpc, mean_theta2_1880kpc, mean_theta2_2540kpc,
    mean_theta2_3440kpc, mean_theta2_4660kpc, mean_theta2_6310kpc
])

plt.loglog(dis, mean_vals, lw=5)
# Example reference lines (kept commented as in your notebook)
# plt.axvline(x=140, label=r'$l_{\rm iso} \simeq R_L^2 / l_{\rm coh} \approx 135\,\mathrm{kpc}$', lw=3, c='r')
# plt.axvline(x=2500, label=r'$l_{\rm iso} \simeq R_L^2 / l_{\rm coh}$', lw=3, c='r')

plt.tick_params(which='minor', width=3, length=6)
plt.grid()
plt.legend()
plt.title(r'Single source $l_{\rm coh}=150\,\mathrm{pc},\, B_{\rm tur}=20\,\mu\mathrm{G}$')
plt.ylabel(r'$\langle \theta^2 \rangle\ \mathrm{[deg^2]}$')
plt.xlabel(r'Termination distance [kpc]')

plt.tight_layout()
plt.savefig('scattering_length_theta2_vs_distance.png', dpi=200, bbox_inches='tight')
plt.show()
